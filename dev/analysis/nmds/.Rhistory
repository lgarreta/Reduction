library (ecodist)
library(vegan)
example_NMDS=metaMDS(community_matrix, # Our community-by-species matrix
k=2) # The number of reduced dimensions
library(vegan)
example_NMDS=metaMDS(community_matrix, # Our community-by-species matrix
k=2) # The number of reduced dimensions
library(vegan)
set.seed(2)
community_matrix=matrix(
sample(1:100,300,replace=T),nrow=10,
dimnames=list(paste("community",1:10,sep=""),paste("sp",1:30,sep="")))
example_NMDS=metaMDS(community_matrix, # Our community-by-species matrix
k=2) # The number of reduced dimensions
View(community_matrix)
View(example_NMDS)
sample(1:100,300,replace=T)
example_NMDS=metaMDS(community_matrix,k=2,trymax=100)
stressplot(example_NMDS)
library(vegan)
set.seed(2)
community_matrix=matrix(
sample(1:100,300,replace=T),nrow=10,
dimnames=list(paste("community",1:10,sep=""),paste("sp",1:30,sep="")))
# Our community-by-species matrix
# The number of reduced dimensions
example_NMDS=metaMDS(community_matrix, k=2)
example_NMDS=metaMDS(community_matrix,k=2,trymax=100)
stressplot(example_NMDS)
plot(example_NMDS)
#!/usr/bin/Rscript
library (ecodist)
#library(vegan)
library (MASS)      # write.matrix: To write matrix to file
options(width=300)
args <-commandArgs (TRUE)
args = c("test33")
dmatFilename = args [1]
cat ("\n>>> Input distance matrix: ", dmatFilename,"\n")
dmat = as.dist (read.table (dmatFilename, header=T))
print (dmat)
out    = nmds (dmat, mindim=2, maxdim=2)
scores = nmds.min (out)
print (scores)
print (out$stress)
pdf (file="nmds-scores.pdf")
plot (scores)
dev.off()
#!/usr/bin/Rscript
library (ecodist)
#library(vegan)
library (MASS)      # write.matrix: To write matrix to file
options(width=300)
args <-commandArgs (TRUE)
args = c("test33.dmat")
dmatFilename = args [1]
cat ("\n>>> Input distance matrix: ", dmatFilename,"\n")
dmat = as.dist (read.table (dmatFilename, header=T))
print (dmat)
out    = nmds (dmat, mindim=2, maxdim=2)
scores = nmds.min (out)
print (scores)
print (out$stress)
pdf (file="nmds-scores.pdf")
plot (scores)
dev.off()
View(scores)
#pdf (file="nmds-scores.pdf")
plot (scores, col=rainbow(1, length(scores)) )
#!/usr/bin/Rscript
library (ecodist)
#library(vegan)
library (MASS)      # write.matrix: To write matrix to file
options(width=300)
args <-commandArgs (TRUE)
args = c("test33.dmat")
dmatFilename = args [1]
cat ("\n>>> Input distance matrix: ", dmatFilename,"\n")
dmat = as.dist (read.table (dmatFilename, header=T))
print (dmat)
out    = nmds (dmat, mindim=2, maxdim=2)
scores = nmds.min (out)
print (scores)
print (out$stress)
#pdf (file="nmds-scores.pdf")
plot (scores, col=rainbow(1, length(scores)) )
#dev.off()
#pdf (file="nmds-scores.pdf")
plot (scores, col=rainbow(length(scores)) )
#pdf (file="nmds-scores.pdf")
plot (scores, col=heat.colors(length(scores)) )
#!/usr/bin/Rscript
library (ecodist)
#library(vegan)
library (MASS)      # write.matrix: To write matrix to file
options(width=300)
args <-commandArgs (TRUE)
args = c("2RN2CA.pmat")
dmatFilename = args [1]
cat ("\n>>> Input distance matrix: ", dmatFilename,"\n")
dmat = as.dist (read.table (dmatFilename, header=T))
print (dmat)
out    = nmds (dmat, mindim=2, maxdim=2)
o
scores = nmds.min (out)
#!/usr/bin/Rscript
library (ecodist)
#library(vegan)
library (MASS)      # write.matrix: To write matrix to file
options(width=300)
args <-commandArgs (TRUE)
#args = c("2RN2CA.pmat")
dmatFilename = args [1]
outFilename = paste (strsplit (dmatFilename, split=".", fixed=T)[[1]][1], ".pdf", sep="")
cat ("\n>>> Parameters: ", dmatFilename," ", outFilename, "\n")
dmat = as.dist (read.table (dmatFilename, header=T))
#print (dmat)
out    = nmds (dmat, mindim=2, maxdim=2)
scores = nmds.min (out)
#print (scores)
#print (out$stress)
pdf (file=outFilename)
plot (scores, col=heat.colors(length(scores)) )
dev.off()
#!/usr/bin/Rscript
library (ecodist)
#library(vegan)
library (MASS)      # write.matrix: To write matrix to file
options(width=300)
args <-commandArgs (TRUE)
#args = c("2RN2CA.pmat")
dmatFilename = args [1]
outFilename = paste (strsplit (dmatFilename, split=".", fixed=T)[[1]][1], ".pdf", sep="")
cat ("\n>>> Parameters: ", dmatFilename," ", outFilename, "\n")
dmat = as.dist (read.table (dmatFilename, header=T))
#print (dmat)
out    = nmds (dmat, mindim=2, maxdim=2)
scores = nmds.min (out)
#print (scores)
#print (out$stress)
pdf (file=outFilename)
plot (scores, col=heat.colors(length(scores)) )
dev.off()
#!/usr/bin/Rscript
library (ecodist)
#library(vegan)
library (MASS)      # write.matrix: To write matrix to file
options(width=300)
args <-commandArgs (TRUE)
#args = c("2RN2CA.pmat")
dmatFilename = args [1]
outFilename = paste (strsplit (dmatFilename, split=".", fixed=T)[[1]][1], ".pdf", sep="")
cat ("\n>>> Parameters: ", dmatFilename," ", outFilename, "\n")
dmat = as.dist (read.table (dmatFilename, header=T))
#print (dmat)
out    = nmds (dmat, mindim=2, maxdim=2)
scores = nmds.min (out)
#print (scores)
#print (out$stress)
pdf (file=outFilename)
plot (scores, col=heat.colors(length(scores)) )
dev.off()
args = c("test33.dmat")
args <-commandArgs (TRUE)
args = c("test33.dmat")
dmatFilename = args [1]
outFilename = paste (strsplit (dmatFilename, split=".", fixed=T)[[1]][1], ".pdf", sep="")
cat ("\n>>> Parameters: ", dmatFilename," ", outFilename, "\n")
dmat = as.dist (read.table (dmatFilename, header=T))
out    = nmds (dmat, mindim=2, maxdim=2)
scores = nmds.min (out)
View(scores)
head.colors(10)
heat.colors(10)
View(scores)
View(scores)
scores
class(scores)
class(scores)
scores
plot (scores)
length(scores)
length(nrow(scores))
length(nrow(scores))
dim (scores)
nrow(scores)
#!/usr/bin/Rscript
library (ecodist)
#library(vegan)
library (MASS)      # write.matrix: To write matrix to file
options(width=300)
args <-commandArgs (TRUE)
args = c("test33.dmat")
dmatFilename = args [1]
outFilename = paste (strsplit (dmatFilename, split=".", fixed=T)[[1]][1], ".pdf", sep="")
cat ("\n>>> Parameters: ", dmatFilename," ", outFilename, "\n")
dmat = as.dist (read.table (dmatFilename, header=T))
#print (dmat)
out    = nmds (dmat, mindim=2, maxdim=2)
scores = nmds.min (out)
#print (scores)
#print (out$stress)
pdf (file=outFilename)
plot (scores, col=heat.colors(nrow(scores)))
dev.off()
#!/usr/bin/Rscript
library (ecodist)
#library(vegan)
library (MASS)      # write.matrix: To write matrix to file
options(width=300)
args <-commandArgs (TRUE)
args = c("test33.dmat")
dmatFilename = args [1]
outFilename = paste (strsplit (dmatFilename, split=".", fixed=T)[[1]][1], ".pdf", sep="")
cat ("\n>>> Parameters: ", dmatFilename," ", outFilename, "\n")
dmat = as.dist (read.table (dmatFilename, header=T))
#print (dmat)
out    = nmds (dmat, mindim=2, maxdim=2)
scores = nmds.min (out)
#print (scores)
#print (out$stress)
pdf (file=outFilename)
plot (scores, col=rainbow(nrow(scores)))
dev.off()
pam.res = pam (distMat, 8)
#!/usr/bin/Rscript
USAGE="\nCompute nmds scores using as input the distance matrix\
USAGE: nmds-analysis.R <distance matrix> => <nmds scores file>\n"
options(width=300)
args <-commandArgs (TRUE)
library (factoextra)
library (cluster)
#args = c("test33.dmat")
main <- function (){
if (length (args) < 1) {
cat (USAGE)
quit()
}
inDistanceMatrixFile = args [1]
clustering_analysis (inDistanceMatrixFile)
name      = strsplit (inDistanceMatrixFile, split=".", fixed=T)[[1]][1]
pdfFile   = paste (name, ".pdf", sep="")
distMat = as.dist (read.table (inDistanceMatrixFile, header=T))
pam.res = pam (distMat, 8)
clusplot (pam.res, dist=distMat)
#fviz_cluster (pam.res)
#fviz_cluster(pam.res$cluster, geom = "point", ellipse.type = "norm")
#fviz_dist(distMat)
#gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
#gradient = list(low = "blue",  mid = "yellow", high = "red"))
}
#--------------------------------------------------------------
#--------------------------------------------------------------
main ()
#!/usr/bin/Rscript
USAGE="\nCompute nmds scores using as input the distance matrix\
USAGE: nmds-analysis.R <distance matrix> => <nmds scores file>\n"
options(width=300)
args <-commandArgs (TRUE)
library (factoextra)
library (cluster)
#args = c("test33.dmat")
main <- function (){
if (length (args) < 1) {
cat (USAGE)
quit()
}
inDistanceMatrixFile = args [1]
clustering_analysis (inDistanceMatrixFile)
name      = strsplit (inDistanceMatrixFile, split=".", fixed=T)[[1]][1]
pdfFile   = paste (name, ".pdf", sep="")
distMat = as.dist (read.table (inDistanceMatrixFile, header=T))
pam.res = pam (distMat, 8)
clusplot (pam.res, dist=distMat)
#fviz_cluster (pam.res)
#fviz_cluster(pam.res$cluster, geom = "point", ellipse.type = "norm")
#fviz_dist(distMat)
#gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
#gradient = list(low = "blue",  mid = "yellow", high = "red"))
}
#--------------------------------------------------------------
#--------------------------------------------------------------
main ()
#!/usr/bin/Rscript
USAGE="\nCompute nmds scores using as input the distance matrix\
USAGE: nmds-analysis.R <distance matrix> => <nmds scores file>\n"
options(width=300)
args <-commandArgs (TRUE)
library (factoextra)
library (cluster)
#args = c("test33.dmat")
main <- function (){
if (length (args) < 1) {
cat (USAGE)
quit()
}
inDistanceMatrixFile = args [1]
#clustering_analysis (inDistanceMatrixFile)
name      = strsplit (inDistanceMatrixFile, split=".", fixed=T)[[1]][1]
pdfFile   = paste (name, ".pdf", sep="")
distMat = as.dist (read.table (inDistanceMatrixFile, header=T))
pam.res = pam (distMat, 8)
clusplot (pam.res, dist=distMat)
#fviz_cluster (pam.res)
#fviz_cluster(pam.res$cluster, geom = "point", ellipse.type = "norm")
#fviz_dist(distMat)
#gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
#gradient = list(low = "blue",  mid = "yellow", high = "red"))
}
#--------------------------------------------------------------
#--------------------------------------------------------------
main ()
args.append ("test11.pmat")
args =  c ("test11.pmat")
inDistanceMatrixFile = args [1]
inDistanceMatrixFile = args [1]
name      = strsplit (inDistanceMatrixFile, split=".", fixed=T)[[1]][1]
pdfFile   = paste (name, ".pdf", sep="")
distMat = as.dist (read.table (inDistanceMatrixFile, header=T))
pam.res = pam (distMat, 8)
clusplot (pam.res, dist=distMat)
args =  c ("2RN2CA.pmat")
inDistanceMatrixFile = args [1]
name      = strsplit (inDistanceMatrixFile, split=".", fixed=T)[[1]][1]
pdfFile   = paste (name, ".pdf", sep="")
distMat = as.dist (read.table (inDistanceMatrixFile, header=T))
pam.res = pam (distMat, 8)
clusplot (pam.res, dist=distMat)
pam.res
pam.res$medoids
distMat
names(distMat)
distMat
fviz_cluster (pam.res)
pam.res
pam.res$medoids
pam.res$id.med
pam.res
pam.res$clusinfo
pam.res$diss
pam.res$clustering
pam.res$clustering[1:10]
pam.res$clustering[1:30]
pam.res$clustering[100:130]
pam.res$clustering[400:429]
pam.res$clustering[1:20]
pam.res$clustering[400:410]
pam.res = pam (distMat, 3)
clusplot (pam.res, dist=distMat)
pam.res = pam (distMat, 3)
clusplot (pam.res, dist=distMat, col=colors(3))
clusplot (seq(1,428), pam.res, dist=distMat)
clusplot (seq(1,428), pam.res$cluster, dist=distMat)
pam.res$clustering[1:30]
pam.res$cluster
iris
iris [,-5]
iris [1,-5]
iris [1,-6]
iris [1,-5]
dat = matrix (seq(1,429))
dat
clusplot (dat, pam.res$cluster, dist=distMat)
clusplot (dat, pam.res$cluster)
fviz_cluster(pam.res)
fviz_cluster(dat,pam.res)
fviz_cluster(dat, pam.res)
plot (pam.res$clustering)
fviz_cluster(dat,pam.res)
?fvix_cluster
?fviz_cluster
fviz_cluster(pam.res,data = dat)
fviz_cluster(pam.res$clustering,data = dat)
fviz_cluster(pam.res$clustering,data = dat)
iris [1:100,-5]
id =iris [1:100,-5]
fviz_cluster(id)
fviz_cluster(kmeans(id, 4))
fviz_cluster(kmeans(id, 4), id)
id
id =iris [1:20,-2]
id
fviz_cluster(kmeans(id, 3), id)
fviz_cluster(kmeans(iris[1:100,-5], 3), id)
id =iris [1:20,-5]
fviz_cluster(kmeans(id, 3), id)
id
id =iris [1:20,-3]
fviz_cluster(kmeans(id, 3), id)
id =iris [1:20,-4]
fviz_cluster(kmeans(id, 3), id)
id =iris [1:20,-4]
id
id =iris [1:20,-5]
id
id =iris [1:20,-6]
id
id =iris [1:20,-5]
id
id =iris [1:20,-4]
id
id =iris [1:20,-3]
id
id =iris [1:20,-2]
id
id =iris [1:20,-7]
id
id =iris [1:20,-8]
id
id =iris [1:20,-8]
id =iris [1:20,-5]
id =iris [1:20,-5]
id
fviz_cluster(kmeans(id, 3), id)
id
frame (seq(1,428))
as.frame (seq(1,428))
seq (20)
matrix(seq (20))
data.frame(seq (20))
fviz_cluster(pam.res$clustering,data = data.frame (seq(429)))
fviz_cluster(pam.res$clustering,data = data.frame (seq(429))
fviz_cluster(pam.res$clustering,data = data.frame (seq(429)))
fviz_cluster(pam.res$clustering,data = data.frame (seq(429)))
fviz_cluster(pam.res$clustering,data = data.frame (seq(429)))
fviz_cluster(pam.res$clustering,data = iris [1:429,-5])
fviz_cluster(kmeans(id, 3), id)
km=kmeans (id,3)
km
km$cluster
pr=pam.res
pr$clusinfo
pr$clustering
km
pr
km
id
km=pam (id,3)
fviz_cluster(km, id)
km$clusinfo
pr$clusinfo
km$medoids
pr$medoids
pr$objective
pr$diss
km$diss
dm
distMat
pr$diss = distMat
fviz_cluster (pr)
fviz_cluster (pr$clustering)
fviz_cluster (pr)
fviz_cluster (km)
dir (km)
print (km)
db <- fpc::dbscan(distMat, eps=0.15, MinPts = 5, scale = FALSE,
method = "dist")
dbscan_analysys (inDistanceMatrixFile)
#!/usr/bin/Rscript
library ("fpc")
library("dbscan")
USAGE="\nCompute nmds scores using as input the distance matrix\
USAGE: nmds-analysis.R <distance matrix> => <nmds scores file>\n"
options(width=300)
args <-commandArgs (TRUE)
library (factoextra)
library (cluster)
#args = c("test33.dmat")
main <- function (){
if (length (args) < 1) {
cat (USAGE)
quit()
}
args =  c ("2RN2CA.pmat")
inDistanceMatrixFile = args [1]
#clustering_analysis (inDistanceMatrixFile)
name      = strsplit (inDistanceMatrixFile, split=".", fixed=T)[[1]][1]
pdfFile   = paste (name, ".pdf", sep="")
dbscan_analysys (inDistanceMatrixFile)
#
# pam.res = pam (distMat, 3)
# clusplot (seq(1,428), pam.res$cluster, dist=distMat)
# fviz_cluster (pam.res)
#fviz_cluster(pam.res$cluster, geom = "point", ellipse.type = "norm")
#fviz_dist(distMat)
#gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
#gradient = list(low = "blue",  mid = "yellow", high = "red"))
}
#--------------------------------------------------------------
#--------------------------------------------------------------
dbscan_analysis <- function (inDistanceMatrixFile) {
distMat = as.dist (read.table (inDistanceMatrixFile, header=T))
set.seed (123)
db <- fpc::dbscan(distMat, eps=0.15, MinPts = 5, scale = FALSE,
method = "dist")
plot(db, df, main = "DBSCAN", frame = FALSE)
}
#--------------------------------------------------------------
#--------------------------------------------------------------
main ()
dbscan_analysys (inDistanceMatrixFile)
dbscan_analysis (inDistanceMatrixFile)
db <- fpc::dbscan(distMat, eps=0.15, MinPts = 5, method = "dist")
db
plot(db, df, main = "DBSCAN", frame = FALSE)
plot(db, main = "DBSCAN", frame = FALSE)
pd = read.table ("2RN2CA-nmds.points", header=T)
pd
points = p
pd
